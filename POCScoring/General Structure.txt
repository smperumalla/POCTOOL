General Structure:

The system will be a web application. The frontend will be built with HTML/CSS/JavaScript and possibly a frontend framework/library like React.js for a more dynamic and responsive user interface. The backend will be powered by Python with the Django web framework for handling server-side operations like authentication, database management, and dynamic page generation.

The system can be divided into two main sections: an employee portal and an administrator portal.

Employee Portal:

Login Page: Employees enter their names, which the system uses to direct them to their personalized pages.
Main Dashboard: Shows an overview of past scoring forms and current assigned forms. Each form is represented as a visually appealing UI box. Clicking on a form box leads to the corresponding form's detail page.
Form Detail Page: Contains a detailed form for the employee to complete and submit. Upon submission, redirects back to the Main Dashboard.
Past Forms Page: A list or grid view of all past forms that the employee has completed, along with the scores they've provided.
Administrator Portal:

Login Page: Administrator enters their credentials to access the admin panel.
Admin Dashboard: Displays a box to access the different sections of the admin portal.
Form Creation Page: Administrators can design detailed forms with different sections and weighting. These form templates are saved in the system for future assignments.
Form Assignment Page: Administrators can assign created forms to different employees. They can also group multiple forms into a single "file" or "package" for assignment.
Data Visualization Page: Admins can visualize scoring data in various ways, with charts, graphs, etc. This data is based on the submitted forms from employees.
Additional Features:

Auto-save: For both employees and admins, changes made in forms should be automatically saved so that no work is lost if they navigate away from the page or close their browser.
Notifications: Employees receive notifications when a new form is assigned to them, and admins receive notifications when a form is submitted.
Access Control: Admins can control who has access to certain data and features.
Data Export: Admins can export the form data (both individual responses and aggregated data) to Excel, CSV, or PDF for further analysis.
Form version control: In case admins need to update the form design or structure, versioning allows keeping track of form changes over time without losing the context of past responses.
This is just a high-level overview. The technology stack isn't limited to Django and can be adapted based on specific requirements or preferences.









Current steps/Timeline:

Step 1: Create Basic HTML Pages
Before Creating Django Dynamic pages its important to create static versions of the landing pages first

Employee Login
Administrator Login
Employee Dashboard
Form Completion
Administrator Dashboard
Form Creation
Form Assignment
Data Visualization
Each of these pages will have their own HTML, CSS, and potentially JavaScript(Dashboard and login pages for sure) files.

Step 2: Create Django Project and Apps

Install Django if you haven't already done so.
Create a new Django project.
Inside this project, create two Django apps: one for the employee portal and one for the administrator portal.
Step 3: Define Data Models

Inside Django project and apps in place, you'll define the data models in Django. These data models will correspond to the ones we outlined above.

Step 4: Build Views and Templates

build the views for each page in app, and connect them to the appropriate HTML templates.

Step 5: Create Forms

 create Django forms corresponding to the form templates that the administrators will create.

Step 6: Handle Form Submission

Once the forms are created, handle form submission, storing the completed forms in the database, and calculating scores based on the weights.

Step 7: Build Admin Panel

With the employee portal functional, build the administrator panel. This will include creating form templates, assigning forms, and data visualization.

Throughout this process, you'll also need to handle login and authentication, navigation between pages, and displaying data from the database on the pages.

